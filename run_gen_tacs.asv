%% Make the file for tACS stimulation to be read by Soterix Device

clc
clear
close all

% Waveform Parameters

freq      = 10;       % Frequency in Hz
dur       = 10;       % Duration in seconds
dt        = 1/1000;   % Sampling period
t         = 0:dt:dur; % Time vector
rampOnset = 2;        % Onset of the ramp
rampDur   = 1;        % Duration of the ramp
stimDur   = 2.8;      % Duration of stimulation

elecR = {'CP2', 'P4', 'Pz', 'PO4', 'P2'};
elecL = {'CP1', 'P3', 'Pz', 'PO3', 'P1'};
mA   = [-0.6, -0.225, -0.075, -0.6, 1.5]/1000; % peak-to-peak

pathOut = fullfile(cd, 'waveforms');
if ~exist(pathOut)
    mkdir(pathOut)
end

%% Create the base waveforms for sham and true

waveTrue = zeros(1, length(t));
waveSham = zeros(1, length(t));

% True stimulation
ramp = 0:dt:rampDur-dt;

iRampUpStart = rampOnset/dt + 1;
iRampUpEnd   = iRampUpStart + rampDur/dt - 1;

iStimStart = iRampUpEnd + 1;
iStimEnd   = iStimStart + stimDur/dt - 1;

iRampDownStart = iStimEnd + 1;
iRampDownEnd   = iRampDownStart + rampDur/dt - 1;

waveTrue(iRampUpStart:iRampUpEnd) = ramp;
waveTrue(iStimStart:iStimEnd) = 1;
waveTrue(iRampDownStart:iRampDownEnd) = fliplr(ramp);

% Sham stimulation
ramp = 0:dt:rampDur/2-dt;
ramp = [ramp fliplr(ramp)];

waveSham(iRampUpStart:iRampUpEnd) = ramp;
waveSham(iRampDownStart:iRampDownEnd) = ramp;

% Multiply by sine wave
waveSham = waveSham.*sin(2*pi*freq*t);
waveTrue = waveTrue.*sin(2*pi*freq*t);

% Plot
figure
subplot(1,2,1)
plot(waveTrue)
subplot(1,2,2)
plot(waveSham)

%% Make the files and waveforms at the electrodes

% iSide - Left/Right (1 - Left, 2 - Right);
% iElec - Which electrode

for iSide = [1 2]
    for iElec = 1:length(elecR)

        switch iSide
            case 1
                tempElec = elecL;
            case 2
                tempElec = elecR;
        end

        

    end
end

    


%% Make Sham

f = 10;
t = 0:0.001:10;

% wf_sham = [0:0.01:0.5 0.49:-0.01:0.01 zeros(1,500) 0:0.01:0.5 0.49:-0.01:0];
% wf_true = [0:0.01:1 ones(1,500) 0.99:-0.01:0];
    
wf_true = [zeros(1,2000) 0:0.001:1 ones(1,2800) 0.999:-0.001:0 zeros(1,3200) ];
wf_sham = [zeros(1,2000) 0:0.001:0.5 0.499:-0.001:0.001 zeros(1,2800) 0:0.001:0.5 0.499:-0.001:0.000 zeros(1,3200)];

wf_sham = wf_sham.*sin(t*(2*pi*f));
wf_true = wf_true.*sin(t*(2*pi*f));

%% Make all wf

region = {'CP2', 'P4', 'Pz', 'PO4', 'P2'};
mA = [-0.6, -0.225, -0.075, -0.6, 1.5]/1000/2;

for r = 1:length(region)
    
    %writematrix(wf_sham.*mA(r)', fullfile('waveforms',[region{r} '_sham.txt']))
    %writematrix(wf_true.*mA(r)', fullfile('waveforms',[region{r} '_true.txt']))
    
    dlmwrite(fullfile('waveforms',[region{r} '_sham.txt']), wf_sham.*mA(r)', 'delimiter', '\n')
    dlmwrite(fullfile('waveforms',[region{r} '_true.txt']), wf_true.*mA(r)', 'delimiter', '\n')

end

%% 

region = {'CP1', 'P3', 'Pz', 'PO3', 'P1'};
mA = [-0.6, -0.225, -0.075, -0.6, 1.5]/1000/2;

for r = 1:length(region)
    
    %writematrix(wf_sham.*mA(r)', fullfile('waveforms',[region{r} '_sham.txt']))
    %writematrix(wf_true.*mA(r)', fullfile('waveforms',[region{r} '_true.txt']))
    dlmwrite(fullfile('waveforms',[region{r} '_sham.txt']), wf_sham.*mA(r)', 'delimiter', '\n')
    dlmwrite(fullfile('waveforms',[region{r} '_true.txt']), wf_true.*mA(r)', 'delimiter', '\n')
    
end

